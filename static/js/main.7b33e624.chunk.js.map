{"version":3,"sources":["components/Node.jsx","components/Grid.jsx","components/NavBar.jsx","Graph.js","algorithms.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","node","isStart","isGoal","row","col","isVisited","visited","id","className","Grid","grid","this","map","rowId","key","nodeId","Component","NavBar","handleAlgoDropdown","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","onClick","Graph","nodes","startNode","goalNode","open","closed","i","newRow","j","push","createNode","parent","children","isWall","depth","g","h","f","includes","forEach","updateDiscoveredNode","current","weight","formulateActions","graph","actions","length","bfs","destination","checkOpen","dfs","unshift","App","state","algorithms","name","algoChosen","bind","animateSearch","initializeGraph","setState","resetGraph","ordering","openList","closedList","reachedGoal","shift","checkClosed","setInterval","path","console","log","algo","currentGraph","newGraph","_","cloneDeep","newNode","setTimeout","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b33e624.chunk.js","sourcesContent":["import '/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css';\nimport React from 'react';\n\nconst Node = (props) => {\n  \n  //const {col, row, isDiscovered, isVisited, isWall}\n  const {isStart, isGoal, row, col, visited} = props.node;\n\n  const isVisited = visited ? \"visited\": \"\";\n\n  return ( \n    <div id={`node-${row}-${col}`} className={`node ${isVisited}`}>\n      <strong>{isStart ? \"S\": isGoal ? \"G\" : \"\"}</strong>\n    </div>\n  );\n}\n \nexport default Node;\n\n","import Node from \"./Node\";\nimport '/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css';\nimport React, {Component} from 'react';\n\nclass Grid extends Component {\n  render() { \n    const {grid} = this.props;\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowId) =>{\n          return(\n            <div className=\"row\" key={rowId}>\n              {row.map((node, nodeId) => {\n                return (\n                  <Node node={node} key={nodeId}/>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n \nexport default Grid;","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  render() {\n    const { handleAlgoDropdown } = this.props;\n\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Path Searching Algorithms\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarText\"\n          aria-controls=\"navbarText\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"dropdown nav-item\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenu2\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Algorithms\n                <span className=\"caret\"></span>\n              </button>\n              <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                <button\n                  className=\"dropdown-item\"\n                  type=\"button\"\n                  id=\"startButtonDijkstra\"\n                  onClick={() => handleAlgoDropdown(\"bfs\")}\n                >\n                  BFS\n                </button>\n                <button\n                  className=\"dropdown-item\"\n                  type=\"button\"\n                  id=\"startButtonDijkstra\"\n                  onClick={() => handleAlgoDropdown(\"dfs\")}\n                >\n                  DFS\n                </button>\n              </ul>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Home <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Features\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Pricing\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","class Graph {\n  constructor() {\n    this.nodes = [];\n    this.startNode = null;\n    this.goalNode = null;\n    this.open = [];\n    this.closed = [];\n  }\n\n  initializeGraph() {\n    this.nodes = [];\n    for (let i = 0; i < 25; i++) {\n      const newRow = [];\n      for (let j = 0; j < 50; j++) {\n        newRow.push(this.createNode(i, j));\n      }\n      this.nodes.push(newRow);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      parent: null,\n      children: [],\n      isStart: false,\n      isGoal: false,\n      isWall: false,\n      visited: false,\n      depth: 0,\n      g: 0,\n      h: 0,\n      f: 0\n    };\n  }\n\n  //check whether node is in open list\n  checkOpen(node) {\n    return this.open.includes(node);\n  }\n\n  //check whether node is in closed list\n  checkClosed(node) {\n    return this.closed.includes(node);\n  }\n\n  resetGraph(){\n    this.nodes.forEach((node) => {\n      node.parent = null;\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.depth = 0;\n      node.visited = false;\n    });\n    this.closed = [];\n    this.open = [];\n  }\n  \n}\n\nexport default Graph;\n","const graphSearch = (graph, ordering) => {\n  const startNode = graph.startNode;\n  const goalNode = graph.goalNode;\n  updateDiscoveredNode(startNode, startNode, 0);\n  const openList = graph.open;\n  const closedList = graph.closed;\n  openList.push(startNode);\n  let reachedGoal = false;\n  let actions, current;\n\n  while (openList.length) {\n    current = openList.shift();\n    // console.log(current);\n    // console.log(openList.length);\n    if (current === goalNode) {\n      reachedGoal = true;\n      break;\n    } else {\n      closedList.push(current);\n      //all allowed actions for current node\n      actions = formulateActions(current, graph);\n      //different ordering of open list for each algo\n      actions.forEach(destination => {\n        //destination not in closed list\n        if (!graph.checkClosed(destination)) {\n          switch (ordering) {\n            case \"bfs\":\n              //console.log(\"bfs\");\n              setInterval(10000);\n              bfs(current, destination, graph);\n              break;\n            case \"dfs\":\n              dfs(current, destination, graph);\n              break;\n          }\n        }\n      });\n    }\n  }\n  let path = \"\";\n  if (reachedGoal) {\n    //do something\n    current = goalNode;\n    while (current.parent !== current) {\n      path = \"-node(\" + current.row + \",\" + current.col + \")\" + path;\n      current = current.parent;\n    }\n    path = \"node(\" + current.row + \",\" + current.col + \")\" + path; \n  }\n  console.log(path);\n};\n\nconst updateDiscoveredNode = (current, parent, weight) => {\n  // console.log(\n  //   \"parent Node[\" + parent.row.toString() + \",\" + parent.col.toString() + \"]\"\n  // );\n  // console.log(\n  //   \"child Node[\" + current.row.toString() + \",\" + current.col.toString() + \"]\"\n  // );\n  current.parent = parent;\n  current.g = parent.g + weight;\n  current.f = current.g + current.h;\n};\n\nconst formulateActions = (current, graph) => {\n  const row = current.row;\n  const col = current.col;\n  const actions = [];\n  //up\n  if (row > 0) actions.push(graph.nodes[row - 1][col]);\n  //down\n  if (row < graph.nodes.length - 1) actions.push(graph.nodes[row + 1][col]);\n  //left\n  if (col > 0) actions.push(graph.nodes[row][col - 1]);\n  //right\n  if (col < graph.nodes[0].length - 1) actions.push(graph.nodes[row][col + 1]);\n\n  return actions;\n};\n\nconst bfs = (current, destination, graph) => {\n  //destination not in open list\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, 1);\n    graph.open.push(destination);\n  }\n};\n\nconst dfs = (current, destination, graph) => {\n  //destination not in open list\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, 1);\n    graph.open.unshift(destination);\n  }\n};\n\nexport { graphSearch, updateDiscoveredNode, bfs, dfs, formulateActions };\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport NavBar from \"./components/NavBar\";\nimport Graph from \"./Graph\";\nimport * as algo from \"./algorithms\";\nimport _ from \"lodash\";\nimport { node } from \"prop-types\";\n\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 15;\nconst GOAL_NODE_ROW = 12;\nconst GOAL_NODE_COL = 35;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: new Graph(),\n      algorithms: [{ name: \"bfs\" }, { name: \"dfs\" }],\n      algoChosen: null\n    };\n    this.handleAlgoDropdown = this.handleAlgoDropdown.bind(this);\n    this.animateSearch = this.animateSearch.bind(this);\n  }\n\n  componentDidMount() {\n    const graph = new Graph();\n    graph.initializeGraph();\n\n    const startNode = graph.nodes[START_NODE_ROW][START_NODE_COL];\n    graph.startNode = startNode;\n    startNode.isStart = true;\n\n    const goalNode = graph.nodes[GOAL_NODE_ROW][GOAL_NODE_COL];\n    graph.goalNode = goalNode;\n    goalNode.isGoal = true;\n    this.setState({ graph });\n  }\n\n  handleAlgoDropdown(name) {\n    const { graph } = this.state;\n    graph.resetGraph();\n    algo.graphSearch(graph, name);\n    this.animateSearch();\n  }\n\n  animateSearch(){\n    const currentGraph = this.state.graph;\n    //const newGraph = JSON.parse(JSON.stringify(currentGraph));\n    //const newGraph = Flatted.parse(Flatted.stringify(currentGraph));\n    const newGraph = _.cloneDeep(currentGraph);\n\n    // currentGraph.closed.forEach((node, iteration) => {\n    //   const newNode = {\n    //     ...node,\n    //     visited: true\n    //   }\n    //   newGraph.nodes[node.row][node.col] = newNode;\n    //   setTimeout(() => {\n    //     this.setState({graph: newGraph});\n    //   }, 1000*iteration);\n    // });\n    for (let i = 0; i < currentGraph.closed.length; i++){\n      const node = currentGraph.closed[i];\n      const newNode = {\n        ...node,\n        visited: true,\n      }\n      newGraph.nodes[node.row][node.col] = newNode;\n      setTimeout(() => {\n        this.setState({graph: newGraph});\n          }, 10*i);\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar handleAlgoDropdown={this.handleAlgoDropdown} />\n        <Grid grid={this.state.graph.nodes} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/js/dist/dropdown'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
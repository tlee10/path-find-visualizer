{"version":3,"sources":["components/Node.jsx","components/Grid.jsx","components/NavBar.jsx","Graph.js","algorithms.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","node","onMouseDown","onMouseEnter","onMouseLeave","onMouseUp","isVisited","visited","isWall","isPath","id","row","col","className","isStart","isGoal","Grid","this","grid","map","rowId","key","nodeId","Component","NavBar","algoChosen","handleAlgoDropdown","activateSearch","clearWalls","animationActivated","activateBtnColor","activateBtnText","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","algo","onClick","Graph","nodes","startNode","goalNode","open","closed","i","newRow","j","push","createNode","parent","children","depth","weight","g","h","f","includes","forEach","updateDiscoveredNode","destination","current","formulateActions","graph","actions","length","bfs","checkOpen","dfs","console","log","splice","indexOf","unshift","weightedSearch","heuristic","Math","abs","graphSearch","ordering","openList","closedList","reachedGoal","shift","checkClosed","sort","a","b","path","START_NODE_ROW","START_NODE_COL","GOAL_NODE_ROW","GOAL_NODE_COL","App","componentDidMount","initializeGraph","setState","name","copyGraph","state","_","cloneDeep","clickAction","resetGraph","setTimeout","animateSearch","iteration","animatePath","coordinates","newGraph","algorithms","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aae1ca79.chunk.js","sourcesContent":["import \"/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css\";\nimport React from \"react\";\n\nconst Node = props => {\n  //const {col, row, isDiscovered, isVisited, isWall}\n  \n  const {\n    node,\n    onMouseDown,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseUp\n  } = props;\n\n  const isVisited = node.visited ? \"visited\" : \"\";\n  const isWall = node.isVisited ? \"\" : node.isWall ? \"wall\" : \"\";\n  const isPath = node.isPath ? \"path\" : \"\";\n  return (\n    <div\n      id={`node-${node.row}-${node.col}`}\n      className={`node ${isVisited} ${isWall} ${isPath}`}\n      onMouseDown={() => onMouseDown(node)}\n      onMouseEnter={() => onMouseEnter(node)}\n      onMouseLeave={() => onMouseLeave(node)}\n      onMouseUp={() => onMouseUp()}\n    >\n      <strong>{node.isStart ? \"S\" : node.isGoal ? \"G\" : \"\"}</strong>\n    </div>\n  );\n};\n\nexport default Node;\n","import Node from \"./Node\";\nimport \"/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css\";\nimport React, { Component } from \"react\";\n\nclass Grid extends Component {\n  render() {\n    const {\n      grid,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseUp\n    } = this.props;\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowId) => {\n          return (\n            <div className=\"row\" key={rowId}>\n              {row.map((node, nodeId) => {\n                return (\n                  <Node\n                    node={node}\n                    key={nodeId}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onMouseUp={onMouseUp}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  render() {\n    const algorithms = [\"BFS\", \"DFS\", \"Dijkstra\", \"A*\"];\n    const {\n      algoChosen,\n      handleAlgoDropdown,\n      activateSearch,\n      clearWalls,\n      animationActivated\n    } = this.props;\n    const activateBtnColor = algoChosen === \"\" ? \"btn-dark\" : animationActivated ? \"btn-danger\" : \"btn-success\";\n    const activateBtnText =\n      algoChosen === \"\" ? \"Choose An Algorithm\" : animationActivated ? \"Searching\" : \"Activate \" + algoChosen;\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Path Searching Visualizer\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarText\"\n          aria-controls=\"navbarText\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"dropdown nav-item\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenu2\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                <strong>Algorithms</strong>\n                <span className=\"caret\"></span>\n              </button>\n              <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                {algorithms.map(algo => {\n                  return (\n                    <button\n                      className=\"dropdown-item\"\n                      key={algo}\n                      onClick={() => handleAlgoDropdown(algo)}\n                    >\n                      {algo}\n                    </button>\n                  );\n                })}\n              </ul>\n              <button\n                className={`btn ${activateBtnColor}`}\n                type=\"button\"\n                onClick={() => activateSearch()}\n              >\n                <strong>{activateBtnText}</strong>\n                \n              </button>\n              <button\n                className={`btn btn-dark`}\n                type=\"button\"\n                onClick={() => clearWalls()}\n              >\n                <strong>Clear Walls</strong>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","class Graph {\n  constructor() {\n    this.nodes = [];\n    this.startNode = null;\n    this.goalNode = null;\n    this.open = [];\n    this.closed = [];\n  }\n\n  initializeGraph() {\n    this.nodes = [];\n    for (let i = 0; i < 25; i++) {\n      const newRow = [];\n      for (let j = 0; j < 50; j++) {\n        newRow.push(this.createNode(i, j));\n      }\n      this.nodes.push(newRow);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      parent: null,\n      children: [],\n      isStart: false,\n      isGoal: false,\n      isWall: false,\n      visited: false,\n      depth: 0,\n      weight: 1,\n      g: 0,\n      h: 0,\n      f: 0\n    };\n  }\n\n  //check whether node is in open list\n  checkOpen(node) {\n    return this.open.includes(node);\n  }\n\n  //check whether node is in closed list\n  checkClosed(node) {\n    return this.closed.includes(node);\n  }\n\n  resetGraph() {\n    this.nodes.forEach(row => {\n      row.forEach((node) => {\n        //console.log(node);\n        node.parent = null;\n        node.f = 0;\n        node.g = 0;\n        node.h = 0;\n        node.depth = 0;\n        node.visited = false;\n        node.isPath = false;\n      }) \n    });\n    this.closed = [];\n    this.open = [];\n  }\n\n  \n}\n\nexport default Graph;\n","const graphSearch = (graph, ordering) => {\n  console.log(graph);\n  const startNode = graph.startNode;\n  const goalNode = graph.goalNode;\n  updateDiscoveredNode(startNode, startNode, 0);\n  const openList = graph.open;\n  const closedList = graph.closed;\n  openList.push(startNode);\n  let reachedGoal = false;\n  if (ordering === \"A*\") startNode.h = heuristic(startNode, goalNode);\n  let actions, current;\n\n  while (openList.length) {\n    current = openList.shift();\n    closedList.push(current);\n    if (current.isGoal) {\n      reachedGoal = true;\n      break;\n    } else {\n      //all allowed actions for current node\n      actions = formulateActions(current, graph);\n      //different ordering of open list for each algo\n      actions.forEach(destination => {\n        //destination not in closed list\n        if (!destination.isWall) {\n          if (!graph.checkClosed(destination)) {\n            switch (ordering) {\n              case \"BFS\":\n                //console.log(\"bfs\");\n                bfs(current, destination, graph);\n                break;\n              case \"DFS\":\n                dfs(current, destination, graph);\n                break;\n              //algorithms with weighted graph\n              default:\n                if (ordering === \"A*\")\n                  destination.h = heuristic(destination, goalNode);\n                weightedSearch(current, destination, graph);\n            }\n          }\n        }\n      });\n      //algorithms that use priority queue\n      if (ordering === \"Dijkstra\" || ordering === \"A*\")\n        openList.sort((a, b) => (a.f < b.f ? -1 : 1));\n    }\n  }\n\n  let path = \"\";\n  if (reachedGoal) {\n    //do something\n    current = goalNode;\n    while (current.parent !== current) {\n      path = \"-node(\" + current.row + \",\" + current.col + \")\" + path;\n      current = current.parent;\n    }\n    path = \"node(\" + current.row + \",\" + current.col + \")\" + path;\n  }\n  current.isStart ? console.log(path) : console.log(\"NO PATH\");\n};\n\nconst updateDiscoveredNode = (destination, current, weight) => {\n  destination.parent = current;\n  destination.g = current.g + weight;\n  destination.f = destination.g + destination.h;\n};\n\nconst formulateActions = (current, graph) => {\n  const row = current.row;\n  const col = current.col;\n  const actions = [];\n  //up\n  if (row > 0) actions.push(graph.nodes[row - 1][col]);\n  //right\n  if (col < graph.nodes[0].length - 1) actions.push(graph.nodes[row][col + 1]);\n  //down\n  if (row < graph.nodes.length - 1) actions.push(graph.nodes[row + 1][col]);\n  //left\n  if (col > 0) actions.push(graph.nodes[row][col - 1]);\n\n  return actions;\n};\n\nconst bfs = (current, destination, graph) => {\n  //destination not in open list\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, 1);\n    graph.open.push(destination);\n  }\n};\n\nconst dfs = (current, destination, graph) => {\n  updateDiscoveredNode(destination, current, 1);\n  //deepest node expands first\n  if (graph.checkOpen(destination)) {\n    console.log(\"yeyeyeye\")\n    graph.open.splice(graph.open.indexOf(destination), 1);\n  }\n  graph.open.unshift(destination);\n};\n\n// const dijkstra = (current, destination, graph) => {\n//   if (!graph.checkOpen(destination)){\n//     updateDiscoveredNode(destination, current, current.weight);\n//     graph.open.push(destination);\n//   }\n//   else {\n//     if (current.f + destination.weight < destination.f){\n//       updateDiscoveredNode(destination, current, destination.weight);\n//     }\n//   }\n// }\n\nconst weightedSearch = (current, destination, graph) => {\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, current.weight);\n    graph.open.push(destination);\n  } else {\n    let cost = current.g + destination.weight;\n    if (cost + destination.h < destination.f) {\n      updateDiscoveredNode(destination, current, destination.weight);\n    }\n  }\n};\n\n//Manhattan Distance (the lightest weight = 1)\nconst heuristic = (node, goalNode) => {\n  let dx = Math.abs(node.col - goalNode.col);\n  let dy = Math.abs(node.row - goalNode.row);\n  return dx + dy;\n};\n\nexport default graphSearch;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport NavBar from \"./components/NavBar\";\nimport Graph from \"./Graph\";\nimport graphSearch from \"./algorithms\";\nimport _ from \"lodash\";\n\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 15;\nconst GOAL_NODE_ROW = 12;\nconst GOAL_NODE_COL = 16;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: new Graph(),\n      algorithms: [{ name: \"bfs\" }, { name: \"dfs\" }],\n      algoChosen: \"\",\n      animationActivated: false,\n      clickAction: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    const graph = new Graph();\n    graph.initializeGraph();\n\n    const startNode = graph.nodes[START_NODE_ROW][START_NODE_COL];\n    graph.startNode = startNode;\n    startNode.isStart = true;\n\n    const goalNode = graph.nodes[GOAL_NODE_ROW][GOAL_NODE_COL];\n    graph.goalNode = goalNode;\n    goalNode.isGoal = true;\n    this.setState({ graph });\n  };\n\n  //algorithm selection\n  handleAlgoDropdown = name => {\n    this.setState({ algoChosen: name });\n  };\n\n  copyGraph = state => {\n    const graph = _.cloneDeep(state.graph);\n    return graph;\n  };\n\n  onMouseDown = node => {\n    if (!this.state.animationActivated) {\n      //actions to take depends on what node user clicked on\n      this.setState({\n        clickAction: node.isStart ? \"start\" : node.isGoal ? \"goal\" : \"wall\"\n      });\n      //click on non-special nodes will turn them to walls\n      const graph = this.copyGraph(this.state);\n\n      if (!node.isStart && !node.isGoal)\n        graph.nodes[node.row][node.col].isWall = !node.isWall;\n      this.setState({ graph });\n    }\n  };\n\n  onMouseEnter = node => {\n    if (this.state.clickAction !== \"\") {\n      this.setState((state, props) => {\n        const graph = this.copyGraph(state);\n\n        if (this.state.clickAction === \"start\") {\n          graph.startNode = graph.nodes[node.row][node.col];\n          graph.nodes[node.row][node.col].isStart = true;\n        } else if (this.state.clickAction === \"goal\") {\n          graph.goalNode = graph.nodes[node.row][node.col];\n          graph.nodes[node.row][node.col].isGoal = true;\n        } else if (\n          this.state.clickAction === \"wall\" &&\n          !node.isStart &&\n          !node.isGoal\n        ) {\n          graph.nodes[node.row][node.col].isWall = !node.isWall;\n        }\n        return { ...state, graph };\n      });\n    }\n  };\n\n  onMouseLeave = node => {\n    if (this.state.clickAction !== \"\") {\n      this.setState((state, props) => {\n        const graph = this.copyGraph(state);\n\n        if (this.state.clickAction === \"start\")\n          graph.nodes[node.row][node.col].isStart = false;\n        else if (this.state.clickAction === \"goal\")\n          graph.nodes[node.row][node.col].isGoal = false;\n        return { ...state, graph };\n      });\n    }\n  };\n\n  onMouseUp = () => {\n    //mouse up after either start node or goal node is clicked\n    if (this.state.clickAction !== \"\") this.setState({ clickAction: \"\" });\n  };\n\n  activateSearch = () => {\n    if (this.state.algoChosen !== \"\" && !this.state.animationActivated) {\n      this.setState((state, props) => {\n        const graph = this.copyGraph(state);\n        graph.resetGraph();\n        graphSearch(graph, state.algoChosen);\n        //graph.closed.forEach((node) => {node.visited = true;});\n        return { graph, animationActivated: true };\n      });\n      setTimeout(() => this.animateSearch(), 100);\n    }\n  };\n\n  //animate path searching by changing 'visited' property of nodes in closed list to true\n  animateSearch = () => {\n    const oldGraph = this.state.graph;\n    let i;\n    oldGraph.closed.forEach((node, iteration) => {\n      i = iteration;\n      setTimeout(() => {\n        this.setState((state, props) => {\n          const graph = this.copyGraph(state);\n          graph.nodes[node.row][node.col].visited = true;\n          return { graph };\n        });\n      }, 100 * iteration);\n    });\n    console.log(i);\n    setTimeout(() => this.animatePath(), 100 * (i + 1));\n  };\n\n  animatePath = () => {\n    let current = this.state.graph.goalNode;\n    const path = [];\n    let i;\n    //if node's parent is not itself and there's a path\n    while (current.parent !== current && current.parent !== null) {\n      path.unshift({ row: current.row, col: current.col });\n      current = current.parent;\n    }\n    path.unshift({ row: current.row, col: current.col });\n    console.log(\"coordinates\");\n    console.log(path);\n    if (current.parent === current) {\n      path.forEach((coordinates, iteration) => {\n        i = iteration;\n        setTimeout(() => {\n          this.setState((state, props) => {\n            const newGraph = this.copyGraph(state);\n            newGraph.nodes[coordinates.row][coordinates.col].isPath = true;\n            return { graph: newGraph };\n          });\n        }, 100 * iteration);\n      });\n      setTimeout(() => {\n        this.setState({ animationActivated: false });\n      }, 100 * i);\n    }\n  };\n\n  clearWalls = () => {\n    if (!this.state.animationActivated) {\n      const newGraph = this.copyGraph(this.state);\n      newGraph.nodes.forEach(row => {\n        row.forEach(node => {\n          node.isWall = false;\n        });\n      });\n      this.setState({ graph: newGraph });\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          algoChosen={this.state.algoChosen}\n          handleAlgoDropdown={this.handleAlgoDropdown}\n          activateSearch={this.activateSearch}\n          resetGraph={this.resetGraph}\n          clearWalls={this.clearWalls}\n          animationActivated={this.state.animationActivated}\n        />\n        <Grid\n          grid={this.state.graph.nodes}\n          onMouseDown={this.onMouseDown}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n          onMouseUp={this.onMouseUp}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/js/dist/dropdown'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}>\n  {console.log(process.env.PUBLIC_URL)}\n  <App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
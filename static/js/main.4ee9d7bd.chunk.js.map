{"version":3,"sources":["components/Node.jsx","components/Grid.jsx","components/NavBar.jsx","Graph.js","algorithms.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","node","isStart","isGoal","row","col","isVisited","visited","id","className","Grid","grid","this","map","rowId","key","nodeId","Component","NavBar","handleAlgoDropdown","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","algo","onClick","Graph","nodes","startNode","goalNode","open","closed","i","newRow","j","push","createNode","parent","children","isWall","depth","weight","g","h","f","includes","forEach","updateDiscoveredNode","destination","current","formulateActions","graph","actions","length","bfs","checkOpen","dfs","unshift","weightedSearch","heuristic","Math","abs","graphSearch","ordering","openList","closedList","reachedGoal","shift","checkClosed","sort","a","b","path","console","log","App","state","algorithms","name","algoChosen","bind","animateSearch","initializeGraph","setState","resetGraph","currentGraph","newGraph","_","cloneDeep","setTimeout","newNode","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ee9d7bd.chunk.js","sourcesContent":["import '/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css';\nimport React from 'react';\n\nconst Node = (props) => {\n  \n  //const {col, row, isDiscovered, isVisited, isWall}\n  const {isStart, isGoal, row, col, visited} = props.node;\n\n  const isVisited = visited ? \"visited\": \"\";\n\n  return ( \n    <div id={`node-${row}-${col}`} className={`node ${isVisited}`}>\n      <strong>{isStart ? \"S\": isGoal ? \"G\" : \"\"}</strong>\n    </div>\n  );\n}\n \nexport default Node;\n\n","import Node from \"./Node\";\nimport '/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css';\nimport React, {Component} from 'react';\n\nclass Grid extends Component {\n  render() { \n    const {grid} = this.props;\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowId) =>{\n          return(\n            <div className=\"row\" key={rowId}>\n              {row.map((node, nodeId) => {\n                return (\n                  <Node node={node} key={nodeId}/>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n \nexport default Grid;","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  render() {\n    const algorithms = [\"BFS\", \"DFS\", \"Dijkstra\", \"A*\"];\n    const { handleAlgoDropdown } = this.props;\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Path Searching Algorithms\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarText\"\n          aria-controls=\"navbarText\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"dropdown nav-item\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenu2\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Algorithms\n                <span className=\"caret\"></span>\n              </button>\n              <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                {algorithms.map(algo => {\n                  return (\n                    <button\n                      className=\"dropdown-item\"\n                      onClick={() => handleAlgoDropdown(algo)}\n                    >\n                      {algo}\n                    </button>\n                  );\n                })}\n              </ul>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","class Graph {\n  constructor() {\n    this.nodes = [];\n    this.startNode = null;\n    this.goalNode = null;\n    this.open = [];\n    this.closed = [];\n  }\n\n  initializeGraph() {\n    this.nodes = [];\n    for (let i = 0; i < 25; i++) {\n      const newRow = [];\n      for (let j = 0; j < 50; j++) {\n        newRow.push(this.createNode(i, j));\n      }\n      this.nodes.push(newRow);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      parent: null,\n      children: [],\n      isStart: false,\n      isGoal: false,\n      isWall: false,\n      visited: false,\n      depth: 0,\n      weight: 1,\n      g: 0,\n      h: 0,\n      f: 0\n    };\n  }\n\n  //check whether node is in open list\n  checkOpen(node) {\n    return this.open.includes(node);\n  }\n\n  //check whether node is in closed list\n  checkClosed(node) {\n    return this.closed.includes(node);\n  }\n\n  resetGraph(){\n    this.nodes.forEach((node) => {\n      node.parent = null;\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.depth = 0;\n      node.visited = false;\n    });\n    this.closed = [];\n    this.open = [];\n  }\n  \n}\n\nexport default Graph;\n","const graphSearch = (graph, ordering) => {\n  const startNode = graph.startNode;\n  const goalNode = graph.goalNode;\n  updateDiscoveredNode(startNode, startNode, 0);\n  const openList = graph.open;\n  const closedList = graph.closed;\n  openList.push(startNode);\n  let reachedGoal = false;\n  if (ordering === \"A*\") startNode.h = heuristic(startNode, goalNode);\n  let actions, current;\n\n  while (openList.length) {\n    current = openList.shift();\n    closedList.push(current);\n\n    if (current === goalNode) {\n      reachedGoal = true;\n      break;\n    } else {\n      //all allowed actions for current node\n      actions = formulateActions(current, graph);\n      //different ordering of open list for each algo\n      actions.forEach(destination => {\n        //destination not in closed list\n        if (!graph.checkClosed(destination)) {\n          switch (ordering) {\n            case \"BFS\":\n              //console.log(\"bfs\");\n              bfs(current, destination, graph);\n              break;\n            case \"DFS\":\n              dfs(current, destination, graph);\n              break;\n            //algorithms with weighted graph\n            default:\n              if (ordering === \"A*\")\n                destination.h = heuristic(destination, goalNode);\n              weightedSearch(current, destination, graph);\n          }\n        }\n      });\n      //algorithms that use priority queue\n      if (ordering === \"Dijkstra\" || ordering === \"A*\") {\n        openList.sort((a, b) => (a.f < b.f ? -1 : 1));\n      }\n    }\n  }\n  let path = \"\";\n  if (reachedGoal) {\n    //do something\n    current = goalNode;\n    while (current.parent !== current) {\n      path = \"-node(\" + current.row + \",\" + current.col + \")\" + path;\n      current = current.parent;\n    }\n    path = \"node(\" + current.row + \",\" + current.col + \")\" + path;\n  }\n  console.log(path);\n};\n\nconst updateDiscoveredNode = (destination, current, weight) => {\n  destination.parent = current;\n  destination.g = current.g + weight;\n  destination.f = destination.g + destination.h;\n};\n\nconst formulateActions = (current, graph) => {\n  const row = current.row;\n  const col = current.col;\n  const actions = [];\n  //up\n  if (row > 0) actions.push(graph.nodes[row - 1][col]);\n  //right\n  if (col < graph.nodes[0].length - 1) actions.push(graph.nodes[row][col + 1]);\n  //down\n  if (row < graph.nodes.length - 1) actions.push(graph.nodes[row + 1][col]);\n  //left\n  if (col > 0) actions.push(graph.nodes[row][col - 1]);\n\n  return actions;\n};\n\nconst bfs = (current, destination, graph) => {\n  //destination not in open list\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, 1);\n    graph.open.push(destination);\n  }\n};\n\nconst dfs = (current, destination, graph) => {\n  updateDiscoveredNode(destination, current, 1);\n  //deepest node expands first\n  graph.open.unshift(destination);\n};\n\n// const dijkstra = (current, destination, graph) => {\n//   if (!graph.checkOpen(destination)){\n//     updateDiscoveredNode(destination, current, current.weight);\n//     graph.open.push(destination);\n//   }\n//   else {\n//     if (current.f + destination.weight < destination.f){\n//       updateDiscoveredNode(destination, current, destination.weight);\n//     }\n//   }\n// }\n\nconst weightedSearch = (current, destination, graph) => {\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, current.weight);\n    graph.open.push(destination);\n  } else {\n    let cost = current.g + destination.weight;\n    if (cost + destination.h < destination.f) {\n      updateDiscoveredNode(destination, current, destination.weight);\n    }\n  }\n};\n\n//Manhattan Distance (the lightest weight = 1)\nconst heuristic = (node, goalNode) => {\n  let dx = Math.abs(node.col - goalNode.col);\n  let dy = Math.abs(node.row - goalNode.row);\n  return dx + dy;\n};\n\nexport default graphSearch;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport NavBar from \"./components/NavBar\";\nimport Graph from \"./Graph\";\nimport graphSearch from \"./algorithms\";\nimport _ from \"lodash\";\nimport { node } from \"prop-types\";\n\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 15;\nconst GOAL_NODE_ROW = 0;\nconst GOAL_NODE_COL = 35;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: new Graph(),\n      algorithms: [{ name: \"bfs\" }, { name: \"dfs\" }],\n      algoChosen: null\n    };\n    this.handleAlgoDropdown = this.handleAlgoDropdown.bind(this);\n    this.animateSearch = this.animateSearch.bind(this);\n  }\n\n  componentDidMount() {\n    const graph = new Graph();\n    graph.initializeGraph();\n\n    const startNode = graph.nodes[START_NODE_ROW][START_NODE_COL];\n    graph.startNode = startNode;\n    startNode.isStart = true;\n\n    const goalNode = graph.nodes[GOAL_NODE_ROW][GOAL_NODE_COL];\n    graph.goalNode = goalNode;\n    goalNode.isGoal = true;\n    this.setState({ graph });\n  }\n\n  handleAlgoDropdown(name) {\n    const { graph } = this.state;\n    graph.resetGraph();\n    graphSearch(graph, name);\n    this.animateSearch();\n  }\n\n  animateSearch() {\n    const currentGraph = this.state.graph;\n    //const newGraph = JSON.parse(JSON.stringify(currentGraph));\n    //const newGraph = Flatted.parse(Flatted.stringify(currentGraph));\n    const newGraph = _.cloneDeep(currentGraph);\n\n    // currentGraph.closed.forEach((node, iteration) => {\n    //   const newNode = {\n    //     ...node,\n    //     visited: true\n    //   }\n    //   newGraph.nodes[node.row][node.col] = newNode;\n    //   setTimeout(() => {\n    //     this.setState({graph: newGraph});\n    //   }, 1000*iteration);\n    // });\n    for (let i = 0; i < currentGraph.closed.length; i++) {\n      setTimeout(() => {\n        const node = currentGraph.closed[i];\n        const newNode = {\n          ...node,\n          visited: true\n        };\n        newGraph.nodes[node.row][node.col] = newNode;\n        this.setState({ graph: newGraph });\n      }, 100 * i);\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar handleAlgoDropdown={this.handleAlgoDropdown} />\n        <Grid grid={this.state.graph.nodes} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/js/dist/dropdown'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}>\n  {console.log(process.env.PUBLIC_URL)}\n  <App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
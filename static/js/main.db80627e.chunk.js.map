{"version":3,"sources":["components/Node.jsx","components/Grid.jsx","components/NavBar.jsx","Graph.js","algorithms.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","node","onMouseDown","onMouseEnter","onMouseLeave","onMouseUp","isVisited","visited","isPath","isWall","isWeighted","weight","id","row","col","className","isStart","isGoal","Grid","this","grid","map","rowId","key","nodeId","Component","NavBar","algoChosen","handleAlgoDropdown","handleNodeFeatureDropdown","activateSearch","clearWalls","clearWeight","animationActivated","activateBtnColor","activateBtnText","isWeightedSearch","addNodeFeatureBtnTxt","addNodeFeature","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","algo","onClick","role","disabled","Graph","nodes","startNode","goalNode","open","closed","i","newRow","j","push","createNode","parent","children","depth","g","h","f","includes","forEach","updateDiscoveredNode","destination","current","formulateActions","graph","actions","length","bfs","checkOpen","dfs","console","log","splice","indexOf","unshift","weightedSearch","heuristic","Math","abs","graphSearch","ordering","openList","closedList","reachedGoal","shift","checkClosed","sort","a","b","path","START_NODE_ROW","START_NODE_COL","GOAL_NODE_ROW","GOAL_NODE_COL","App","componentDidMount","initializeGraph","setState","name","copyGraph","state","_","cloneDeep","clickAction","resetGraph","setTimeout","animateSearch","iteration","animatePath","coordinates","newGraph","algorithms","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db80627e.chunk.js","sourcesContent":["import \"../App.css\";\n//import \"../styles/dice_2.png\";\n//import \"../styles/dice_3.png\";\nimport React from \"react\";\n\nconst Node = props => {\n  //const {col, row, isDiscovered, isVisited, isWall}\n  \n  const {\n    node,\n    onMouseDown,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseUp\n  } = props;\n\n  const isVisited = node.visited ? \"visited\" : \"\";\n  const isPath = node.isPath ? \"path\" : \"\";\n  const isWall = node.isVisited ? \"\" : node.isWall ? \"wall\" : \"\";\n  const isWeighted = node.weight === 2 ? \"weight2\" : node.weight === 3 ? \"weight3\" : \"\";\n\n  return (\n    <div\n      id={`node-${node.row}-${node.col}`}\n      className={`node ${isVisited} ${isPath} ${isWall} ${isWeighted}`}\n      onMouseDown={() => onMouseDown(node)}\n      onMouseEnter={() => onMouseEnter(node)}\n      onMouseLeave={() => onMouseLeave(node)}\n      onMouseUp={() => onMouseUp()}\n    >\n      <strong>{node.isStart ? \"S\" : node.isGoal ? \"G\" : \"\"}</strong>\n      {/* {node.weight === 2 ? <img className=\"dice\" src=\"dice_2.png\" unselectable=\"on\"/> : node.weight === 3 ? <img className=\"dice\" src=\"dice_3.png\" unselectable=\"on\"/> : \"\"} */}\n      \n\n    </div>\n  );\n};\n\nexport default Node;\n","import Node from \"./Node\";\nimport \"../App.css\";\nimport React, { Component } from \"react\";\n\nclass Grid extends Component {\n  render() {\n    const {\n      grid,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseUp\n    } = this.props;\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowId) => {\n          return (\n            <div className=\"row\" key={rowId}>\n              {row.map((node, nodeId) => {\n                return (\n                  <Node\n                    node={node}\n                    key={nodeId}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onMouseUp={onMouseUp}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  render() {\n    const algorithms = [\"BFS\", \"DFS\", \"Dijkstra\", \"A*\"];\n    const {\n      algoChosen,\n      handleAlgoDropdown,\n      handleNodeFeatureDropdown,\n      activateSearch,\n      clearWalls,\n      clearWeight,\n      animationActivated,\n      addNodeFeature\n    } = this.props;\n\n    const activateBtnColor =\n      algoChosen === \"\"\n        ? \"btn-dark\"\n        : animationActivated\n        ? \"btn-danger\"\n        : \"btn-success\";\n    const activateBtnText =\n      algoChosen === \"\"\n        ? \"Choose An Algorithm\"\n        : animationActivated\n        ? \"Searching\"\n        : \"Activate \" + algoChosen;\n    const isWeightedSearch =\n      algoChosen === \"Dijkstra\" || algoChosen === \"A*\" ? false : true;\n    const addNodeFeatureBtnTxt = \"Add \" + addNodeFeature;\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Path Searching Visualizer\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarText\"\n          aria-controls=\"navbarText\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"dropdown nav-item\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenu2\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                <strong>Algorithms</strong>\n                <span className=\"caret\"></span>\n              </button>\n              <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                {algorithms.map(algo => {\n                  return (\n                    <button\n                      className=\"dropdown-item\"\n                      key={algo}\n                      onClick={() => handleAlgoDropdown(algo)}\n                    >\n                      {algo}\n                    </button>\n                  );\n                })}\n              </ul>\n              <button\n                className={`btn ${activateBtnColor}`}\n                type=\"button\"\n                onClick={() => activateSearch()}\n              >\n                <strong>{activateBtnText}</strong>\n              </button>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                <strong>{addNodeFeatureBtnTxt}</strong>\n              </button>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <button\n                  className=\"dropdown-item \"\n                  onClick={() => handleNodeFeatureDropdown(\"Wall\")}\n                >\n                  Wall\n                </button>\n                <button\n                  className=\"dropdown-item \"\n                  disabled={isWeightedSearch}\n                  onClick={() => handleNodeFeatureDropdown(\"Weight 2\")}\n                >\n                  Weight 2\n                </button>\n                <button\n                  className=\"dropdown-item\"\n                  disabled={isWeightedSearch}\n                  onClick={() => handleNodeFeatureDropdown(\"Weight 3\")}\n                >\n                  Weight 3\n                </button>\n              </div>\n            </li>\n            <button\n              className={`btn btn-dark`}\n              type=\"button\"\n              onClick={() => clearWalls()}\n            >\n              <strong>Clear Walls</strong>\n            </button>\n            <button\n              className={`btn btn-dark`}\n              disabled={isWeightedSearch}\n              type=\"button\"\n              onClick={() => clearWeight()}\n            >\n              <strong>Clear Weight</strong>\n            </button>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","class Graph {\n  constructor() {\n    this.nodes = [];\n    this.startNode = null;\n    this.goalNode = null;\n    this.open = [];\n    this.closed = [];\n  }\n\n  initializeGraph() {\n    this.nodes = [];\n    for (let i = 0; i < 25; i++) {\n      const newRow = [];\n      for (let j = 0; j < 50; j++) {\n        newRow.push(this.createNode(i, j));\n      }\n      this.nodes.push(newRow);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      parent: null,\n      children: [],\n      isStart: false,\n      isGoal: false,\n      isWall: false,\n      visited: false,\n      depth: 0,\n      weight: 1,\n      g: 0,\n      h: 0,\n      f: 0\n    };\n  }\n\n  //check whether node is in open list\n  checkOpen(node) {\n    return this.open.includes(node);\n  }\n\n  //check whether node is in closed list\n  checkClosed(node) {\n    return this.closed.includes(node);\n  }\n\n  resetGraph() {\n    this.nodes.forEach(row => {\n      row.forEach(node => {\n        //console.log(node);\n        node.parent = null;\n        node.f = 0;\n        node.g = 0;\n        node.h = 0;\n        node.depth = 0;\n        node.visited = false;\n        node.isPath = false;\n      });\n    });\n    this.closed = [];\n    this.open = [];\n  }\n}\n\nexport default Graph;\n","const graphSearch = (graph, ordering) => {\n  console.log(graph);\n  const startNode = graph.startNode;\n  const goalNode = graph.goalNode;\n  updateDiscoveredNode(startNode, startNode, 0);\n  const openList = graph.open;\n  const closedList = graph.closed;\n  openList.push(startNode);\n  let reachedGoal = false;\n  if (ordering === \"A*\") startNode.h = heuristic(startNode, goalNode);\n  let actions, current;\n\n  while (openList.length) {\n    current = openList.shift();\n    closedList.push(current);\n    if (current.isGoal) {\n      reachedGoal = true;\n      break;\n    } else {\n      //all allowed actions for current node\n      actions = formulateActions(current, graph);\n      //different ordering of open list for each algo\n      actions.forEach(destination => {\n        //destination not in closed list\n        if (!destination.isWall) {\n          if (!graph.checkClosed(destination)) {\n            switch (ordering) {\n              case \"BFS\":\n                //console.log(\"bfs\");\n                bfs(current, destination, graph);\n                break;\n              case \"DFS\":\n                dfs(current, destination, graph);\n                break;\n              //algorithms with weighted graph\n              default:\n                if (ordering === \"A*\")\n                  destination.h = heuristic(destination, goalNode);\n                weightedSearch(current, destination, graph);\n            }\n          }\n        }\n      });\n      //algorithms that use priority queue\n      if (ordering === \"Dijkstra\" || ordering === \"A*\")\n        openList.sort((a, b) => (a.f < b.f ? -1 : 1));\n    }\n  }\n\n  let path = \"\";\n  if (reachedGoal) {\n    //do something\n    current = goalNode;\n    while (current.parent !== current) {\n      path = \"-node(\" + current.row + \",\" + current.col + \")\" + path;\n      current = current.parent;\n    }\n    path = \"node(\" + current.row + \",\" + current.col + \")\" + path;\n  }\n  current.isStart ? console.log(path) : console.log(\"NO PATH\");\n};\n\nconst updateDiscoveredNode = (destination, current, weight) => {\n  destination.parent = current;\n  destination.g = current.g + weight;\n  destination.f = destination.g + destination.h;\n};\n\nconst formulateActions = (current, graph) => {\n  const row = current.row;\n  const col = current.col;\n  const actions = [];\n  //up\n  if (row > 0) actions.push(graph.nodes[row - 1][col]);\n  //right\n  if (col < graph.nodes[0].length - 1) actions.push(graph.nodes[row][col + 1]);\n  //down\n  if (row < graph.nodes.length - 1) actions.push(graph.nodes[row + 1][col]);\n  //left\n  if (col > 0) actions.push(graph.nodes[row][col - 1]);\n\n  return actions;\n};\n\nconst bfs = (current, destination, graph) => {\n  //destination not in open list\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, 1);\n    graph.open.push(destination);\n  }\n};\n\nconst dfs = (current, destination, graph) => {\n  updateDiscoveredNode(destination, current, 1);\n  //deepest node expands first\n  if (graph.checkOpen(destination)) {\n    console.log(\"yeyeyeye\")\n    graph.open.splice(graph.open.indexOf(destination), 1);\n  }\n  graph.open.unshift(destination);\n};\n\n// const dijkstra = (current, destination, graph) => {\n//   if (!graph.checkOpen(destination)){\n//     updateDiscoveredNode(destination, current, current.weight);\n//     graph.open.push(destination);\n//   }\n//   else {\n//     if (current.f + destination.weight < destination.f){\n//       updateDiscoveredNode(destination, current, destination.weight);\n//     }\n//   }\n// }\n\n//dijkstra and A*\nconst weightedSearch = (current, destination, graph) => {\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, destination.weight);\n    graph.open.push(destination);\n  } else {\n    let cost = current.g + destination.weight;\n    if (cost + destination.h < destination.f) {\n      updateDiscoveredNode(destination, current, destination.weight);\n    }\n  }\n};\n\n//Manhattan Distance (the lightest weight = 1)\nconst heuristic = (node, goalNode) => {\n  let dx = Math.abs(node.col - goalNode.col);\n  let dy = Math.abs(node.row - goalNode.row);\n  return dx + dy;\n};\n\nexport default graphSearch;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport NavBar from \"./components/NavBar\";\nimport Graph from \"./Graph\";\nimport graphSearch from \"./algorithms\";\nimport _ from \"lodash\";\n\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 15;\nconst GOAL_NODE_ROW = 12;\nconst GOAL_NODE_COL = 35;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: new Graph(),\n      algorithms: [{ name: \"bfs\" }, { name: \"dfs\" }],\n      algoChosen: \"\",\n      animationActivated: false,\n      clickAction: \"\",\n      addNodeFeature: \"Wall\"\n    };\n  }\n\n  componentDidMount = () => {\n    const graph = new Graph();\n    graph.initializeGraph();\n\n    const startNode = graph.nodes[START_NODE_ROW][START_NODE_COL];\n    graph.startNode = startNode;\n    startNode.isStart = true;\n\n    const goalNode = graph.nodes[GOAL_NODE_ROW][GOAL_NODE_COL];\n    graph.goalNode = goalNode;\n    goalNode.isGoal = true;\n    this.setState({ graph });\n  };\n\n  //algorithm selection\n  handleAlgoDropdown = name => {\n    if (name !== \"Dijkstra\" || name !== \"A*\")\n      this.setState({ algoChosen: name, addNodeFeature: \"Wall\" });\n    else this.setState({ algoChosen: name });\n  };\n\n  handleNodeFeatureDropdown = name => {\n    this.setState({ addNodeFeature: name });\n  };\n\n  copyGraph = state => {\n    const graph = _.cloneDeep(state.graph);\n    return graph;\n  };\n\n  onMouseDown = node => {\n    if (!this.state.animationActivated) {\n      //actions to take depends on what node user clicked on\n      this.setState({\n        clickAction: node.isStart ? \"start\" : node.isGoal ? \"goal\" : \"normal\"\n      });\n      //click on non-special nodes will turn them to walls\n      const graph = this.copyGraph(this.state);\n\n      if (!node.isStart && !node.isGoal) {\n        if (\n          this.state.addNodeFeature === \"Wall\" &&\n          graph.nodes[node.row][node.col].weight === 1\n        )\n          graph.nodes[node.row][node.col].isWall = !node.isWall;\n        else if (\n          this.state.addNodeFeature === \"Weight 2\" &&\n          !graph.nodes[node.row][node.col].isWall\n        )\n          graph.nodes[node.row][node.col].weight = 2;\n        else if (\n          this.state.addNodeFeature === \"Weight 3\" &&\n          !graph.nodes[node.row][node.col].isWall\n        )\n          graph.nodes[node.row][node.col].weight = 3;\n      }\n      this.setState({ graph });\n    }\n  };\n\n  onMouseEnter = node => {\n    if (this.state.clickAction !== \"\") {\n      this.setState((state, props) => {\n        const graph = this.copyGraph(state);\n\n        if (state.clickAction === \"start\") {\n          graph.startNode = graph.nodes[node.row][node.col];\n          graph.nodes[node.row][node.col].isStart = true;\n        } else if (state.clickAction === \"goal\") {\n          graph.goalNode = graph.nodes[node.row][node.col];\n          graph.nodes[node.row][node.col].isGoal = true;\n        } else if (\n          state.clickAction === \"normal\" &&\n          !node.isStart &&\n          !node.isGoal &&\n          this.state.addNodeFeature === \"Wall\"\n        ) {\n          graph.nodes[node.row][node.col].isWall = !node.isWall;\n        } else if (\n          state.clickAction === \"normal\" &&\n          !node.isStart &&\n          !node.isGoal &&\n          this.state.addNodeFeature === \"Weight 2\"\n        ) {\n          if (graph.nodes[node.row][node.col].weight !== 2) {\n            graph.nodes[node.row][node.col].weight = 2;\n          } else graph.nodes[node.row][node.col].weight = 1;\n        } else if (\n          state.clickAction === \"normal\" &&\n          !node.isStart &&\n          !node.isGoal &&\n          this.state.addNodeFeature === \"Weight 3\"\n        ) {\n          if (graph.nodes[node.row][node.col].weight !== 3) {\n            graph.nodes[node.row][node.col].weight = 3;\n          } else graph.nodes[node.row][node.col].weight = 1;\n        }\n        return { ...state, graph };\n      });\n    }\n  };\n\n  onMouseLeave = node => {\n    if (this.state.clickAction !== \"\") {\n      this.setState((state, props) => {\n        const graph = this.copyGraph(state);\n\n        if (this.state.clickAction === \"start\")\n          graph.nodes[node.row][node.col].isStart = false;\n        else if (this.state.clickAction === \"goal\")\n          graph.nodes[node.row][node.col].isGoal = false;\n        return { ...state, graph };\n      });\n    }\n  };\n\n  onMouseUp = () => {\n    //mouse up after either start node or goal node is clicked\n    if (this.state.clickAction !== \"\") this.setState({ clickAction: \"\" });\n  };\n\n  activateSearch = () => {\n    if (this.state.algoChosen !== \"\" && !this.state.animationActivated) {\n      this.setState((state, props) => {\n        const graph = this.copyGraph(state);\n        graph.resetGraph();\n        graphSearch(graph, state.algoChosen);\n        //graph.closed.forEach((node) => {node.visited = true;});\n        return { graph, animationActivated: true };\n      });\n      setTimeout(() => this.animateSearch(), 100);\n    }\n  };\n\n  //animate path searching by changing 'visited' property of nodes in closed list to true\n  animateSearch = () => {\n    const oldGraph = this.state.graph;\n    let i;\n    oldGraph.closed.forEach((node, iteration) => {\n      i = iteration;\n      setTimeout(() => {\n        this.setState((state, props) => {\n          const graph = this.copyGraph(state);\n          graph.nodes[node.row][node.col].visited = true;\n          return { graph };\n        });\n      }, 100 * iteration);\n    });\n    console.log(i);\n    setTimeout(() => this.animatePath(), 100 * (i + 1));\n  };\n\n  animatePath = () => {\n    let current = this.state.graph.goalNode;\n    const path = [];\n    let i;\n    //if node's parent is not itself and there's a path\n    while (current.parent !== current && current.parent !== null) {\n      path.unshift({ row: current.row, col: current.col });\n      current = current.parent;\n    }\n    path.unshift({ row: current.row, col: current.col });\n    console.log(\"coordinates\");\n    console.log(path);\n    if (current.parent === current) {\n      path.forEach((coordinates, iteration) => {\n        i = iteration;\n        setTimeout(() => {\n          this.setState((state, props) => {\n            const newGraph = this.copyGraph(state);\n            newGraph.nodes[coordinates.row][coordinates.col].isPath = true;\n            return { graph: newGraph };\n          });\n        }, 100 * iteration);\n      });\n      setTimeout(() => {\n        this.setState({ animationActivated: false });\n      }, 100 * i);\n    }\n  };\n\n  clearWalls = () => {\n    if (!this.state.animationActivated) {\n      const newGraph = this.copyGraph(this.state);\n      newGraph.nodes.forEach(row => {\n        row.forEach(node => {\n          node.isWall = false;\n        });\n      });\n      this.setState({ graph: newGraph });\n    }\n  };\n\n  clearWeight = () => {\n    if (!this.state.animationActivated) {\n      const newGraph = this.copyGraph(this.state);\n      newGraph.nodes.forEach(row => {\n        row.forEach(node => {\n          node.weight = 1;\n        });\n      });\n      this.setState({ graph: newGraph });\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          algoChosen={this.state.algoChosen}\n          handleAlgoDropdown={this.handleAlgoDropdown}\n          handleNodeFeatureDropdown={this.handleNodeFeatureDropdown}\n          activateSearch={this.activateSearch}\n          resetGraph={this.resetGraph}\n          clearWalls={this.clearWalls}\n          clearWeight={this.clearWeight}\n          animationActivated={this.state.animationActivated}\n          addNodeFeature={this.state.addNodeFeature}\n        />\n        <Grid\n          grid={this.state.graph.nodes}\n          onMouseDown={this.onMouseDown}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n          onMouseUp={this.onMouseUp}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/js/dist/dropdown'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}>\n  {console.log(process.env.PUBLIC_URL)}\n  <App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
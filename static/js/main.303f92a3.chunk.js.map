{"version":3,"sources":["components/Node.jsx","components/Grid.jsx","components/NavBar.jsx","Graph.js","algorithms.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","node","onMouseDown","onMouseEnter","onMouseLeave","onMouseUp","isVisited","visited","isWall","id","row","col","className","isStart","isGoal","Grid","this","grid","map","rowId","key","nodeId","Component","NavBar","algoChosen","handleAlgoDropdown","activateSearch","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","algo","onClick","Graph","nodes","startNode","goalNode","open","closed","i","newRow","j","push","createNode","parent","children","depth","weight","g","h","f","includes","forEach","updateDiscoveredNode","destination","current","formulateActions","graph","actions","length","bfs","checkOpen","dfs","unshift","weightedSearch","heuristic","Math","abs","graphSearch","ordering","openList","closedList","reachedGoal","shift","checkClosed","sort","a","b","path","console","log","START_NODE_ROW","START_NODE_COL","GOAL_NODE_ROW","GOAL_NODE_COL","App","componentDidMount","initializeGraph","setState","name","state","resetGraph","setTimeout","animateSearch","animationActivated","clickAction","iteration","newNode","algorithms","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.303f92a3.chunk.js","sourcesContent":["import \"/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css\";\nimport React from \"react\";\n\nconst Node = props => {\n  //const {col, row, isDiscovered, isVisited, isWall}\n  \n  const {\n    node,\n    onMouseDown,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseUp\n  } = props;\n\n  const isVisited = node.visited ? \"visited\" : \"\";\n  const isWall = node.isWall ? \"wall\" : \"\";\n  return (\n    <div\n      id={`node-${node.row}-${node.col}`}\n      className={`node ${isVisited} ${isWall}`}\n      onMouseDown={() => onMouseDown(node)}\n      onMouseEnter={() => onMouseEnter(node)}\n      onMouseLeave={() => onMouseLeave(node)}\n      onMouseUp={() => onMouseUp()}\n    >\n      <strong>{node.isStart ? \"S\" : node.isGoal ? \"G\" : \"\"}</strong>\n    </div>\n  );\n};\n\nexport default Node;\n","import Node from \"./Node\";\nimport \"/Users/tx-10/Desktop/react/path-find-visualizer/src/App.css\";\nimport React, { Component } from \"react\";\n\nclass Grid extends Component {\n  render() {\n    const {\n      grid,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseUp\n    } = this.props;\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowId) => {\n          return (\n            <div className=\"row\" key={rowId}>\n              {row.map((node, nodeId) => {\n                return (\n                  <Node\n                    node={node}\n                    key={nodeId}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onMouseUp={onMouseUp}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  render() {\n    const algorithms = [\"BFS\", \"DFS\", \"Dijkstra\", \"A*\"];\n    const { algoChosen, handleAlgoDropdown, activateSearch } = this.props;\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Path Searching Algorithms\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarText\"\n          aria-controls=\"navbarText\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"dropdown nav-item\">\n              <button\n                className=\"btn btn-dark dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenu2\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Algorithms\n                <span className=\"caret\"></span>\n              </button>\n              <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                {algorithms.map(algo => {\n                  return (\n                    <button\n                      className=\"dropdown-item\"\n                      key={algo}\n                      onClick={() => handleAlgoDropdown(algo)}\n                    >\n                      {algo}\n                    </button>\n                  );\n                })}\n              </ul>\n              <button\n                className=\"btn btn-dark\"\n                type=\"button\"\n                onClick={() => activateSearch()}\n              >{algoChosen === \"\" ? \"Choose an algorithm\" : \"Activate \" + algoChosen}</button>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","class Graph {\n  constructor() {\n    this.nodes = [];\n    this.startNode = null;\n    this.goalNode = null;\n    this.open = [];\n    this.closed = [];\n  }\n\n  initializeGraph() {\n    this.nodes = [];\n    for (let i = 0; i < 25; i++) {\n      const newRow = [];\n      for (let j = 0; j < 50; j++) {\n        newRow.push(this.createNode(i, j));\n      }\n      this.nodes.push(newRow);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      parent: null,\n      children: [],\n      isStart: false,\n      isGoal: false,\n      isWall: false,\n      visited: false,\n      depth: 0,\n      weight: 1,\n      g: 0,\n      h: 0,\n      f: 0\n    };\n  }\n\n  //check whether node is in open list\n  checkOpen(node) {\n    return this.open.includes(node);\n  }\n\n  //check whether node is in closed list\n  checkClosed(node) {\n    return this.closed.includes(node);\n  }\n\n  resetGraph(){\n    this.nodes.forEach((node) => {\n      node.parent = null;\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.depth = 0;\n      node.visited = false;\n    });\n    this.closed = [];\n    this.open = [];\n  }\n  \n}\n\nexport default Graph;\n","const graphSearch = (graph, ordering) => {\n  const startNode = graph.startNode;\n  const goalNode = graph.goalNode;\n  updateDiscoveredNode(startNode, startNode, 0);\n  const openList = graph.open;\n  const closedList = graph.closed;\n  openList.push(startNode);\n  let reachedGoal = false;\n  if (ordering === \"A*\") startNode.h = heuristic(startNode, goalNode);\n  let actions, current;\n\n  while (openList.length) {\n    current = openList.shift();\n    closedList.push(current);\n\n    if (current === goalNode) {\n      reachedGoal = true;\n      break;\n    } else {\n      //all allowed actions for current node\n      actions = formulateActions(current, graph);\n      //different ordering of open list for each algo\n      actions.forEach(destination => {\n        //destination not in closed list\n        if (!destination.isWall){\n          if (!graph.checkClosed(destination)) {\n            switch (ordering) {\n              case \"BFS\":\n                //console.log(\"bfs\");\n                bfs(current, destination, graph);\n                break;\n              case \"DFS\":\n                dfs(current, destination, graph);\n                break;\n              //algorithms with weighted graph\n              default:\n                if (ordering === \"A*\")\n                  destination.h = heuristic(destination, goalNode);\n                weightedSearch(current, destination, graph);\n            }\n          }\n        }    \n      });\n      //algorithms that use priority queue\n      if (ordering === \"Dijkstra\" || ordering === \"A*\") {\n        openList.sort((a, b) => (a.f < b.f ? -1 : 1));\n      }\n    }\n  }\n  let path = \"\";\n  if (reachedGoal) {\n    //do something\n    current = goalNode;\n    while (current.parent !== current) {\n      path = \"-node(\" + current.row + \",\" + current.col + \")\" + path;\n      current = current.parent;\n    }\n    path = \"node(\" + current.row + \",\" + current.col + \")\" + path;\n  }\n  current.isStart ? console.log(path) : console.log(\"NO PATH\");\n};\n\nconst updateDiscoveredNode = (destination, current, weight) => {\n  destination.parent = current;\n  destination.g = current.g + weight;\n  destination.f = destination.g + destination.h;\n};\n\nconst formulateActions = (current, graph) => {\n  const row = current.row;\n  const col = current.col;\n  const actions = [];\n  //up\n  if (row > 0) actions.push(graph.nodes[row - 1][col]);\n  //right\n  if (col < graph.nodes[0].length - 1) actions.push(graph.nodes[row][col + 1]);\n  //down\n  if (row < graph.nodes.length - 1) actions.push(graph.nodes[row + 1][col]);\n  //left\n  if (col > 0) actions.push(graph.nodes[row][col - 1]);\n\n  return actions;\n};\n\nconst bfs = (current, destination, graph) => {\n  //destination not in open list\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, 1);\n    graph.open.push(destination);\n  }\n};\n\nconst dfs = (current, destination, graph) => {\n  updateDiscoveredNode(destination, current, 1);\n  //deepest node expands first\n  graph.open.unshift(destination);\n};\n\n// const dijkstra = (current, destination, graph) => {\n//   if (!graph.checkOpen(destination)){\n//     updateDiscoveredNode(destination, current, current.weight);\n//     graph.open.push(destination);\n//   }\n//   else {\n//     if (current.f + destination.weight < destination.f){\n//       updateDiscoveredNode(destination, current, destination.weight);\n//     }\n//   }\n// }\n\nconst weightedSearch = (current, destination, graph) => {\n  if (!graph.checkOpen(destination)) {\n    updateDiscoveredNode(destination, current, current.weight);\n    graph.open.push(destination);\n  } else {\n    let cost = current.g + destination.weight;\n    if (cost + destination.h < destination.f) {\n      updateDiscoveredNode(destination, current, destination.weight);\n    }\n  }\n};\n\n//Manhattan Distance (the lightest weight = 1)\nconst heuristic = (node, goalNode) => {\n  let dx = Math.abs(node.col - goalNode.col);\n  let dy = Math.abs(node.row - goalNode.row);\n  return dx + dy;\n};\n\nexport default graphSearch;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\nimport NavBar from \"./components/NavBar\";\nimport Graph from \"./Graph\";\nimport graphSearch from \"./algorithms\";\n\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 15;\nconst GOAL_NODE_ROW = 0;\nconst GOAL_NODE_COL = 35;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: new Graph(),\n      algorithms: [{ name: \"bfs\" }, { name: \"dfs\" }],\n      algoChosen: \"\",\n      animationActivated: false,\n      clickAction: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    const graph = new Graph();\n    graph.initializeGraph();\n\n    const startNode = graph.nodes[START_NODE_ROW][START_NODE_COL];\n    graph.startNode = startNode;\n    startNode.isStart = true;\n\n    const goalNode = graph.nodes[GOAL_NODE_ROW][GOAL_NODE_COL];\n    graph.goalNode = goalNode;\n    goalNode.isGoal = true;\n    this.setState({ graph });\n  };\n\n  //algorithm selection\n  handleAlgoDropdown = name => {\n    this.setState({algoChosen: name});\n  };\n\n  activateSearch = () => {\n    if (this.state.algoChosen !== \"\"){\n      const graph = this.state.graph;\n      graph.resetGraph();\n      this.setState({ graph });\n      setTimeout(() => {\n        graphSearch(graph, this.state.algoChosen);\n        this.animateSearch();\n      }, 100);\n\n    }\n  }\n\n  onMouseDown = node => {\n    if (!this.state.animationActivated) {\n      //actions to take depends on what node user clicked on\n      this.setState({ clickAction: node.isStart ? \"start\" : node.isGoal ? \"goal\" : \"wall\"});\n    }\n    const graph = this.state.graph;\n    if (!node.isStart && !node.isGoal) node.isWall = !node.isWall;\n    this.setState({graph}); \n  };\n\n  onMouseEnter = node => {\n    const graph = this.state.graph;\n    \n    if (this.state.clickAction === \"start\") {\n      graph.startNode = node;\n      node.isStart = true;\n    } else if (this.state.clickAction === \"goal\"){\n      graph.goalNode = node;\n      node.isGoal = true;\n    }\n    else if (this.state.clickAction === \"wall\" && !node.isStart && !node.isGoal) node.isWall = !node.isWall;\n    \n    this.setState({ graph });\n    \n  };\n\n  onMouseLeave = node => {\n    const graph = this.state.graph;\n    \n    if (this.state.clickAction === \"start\")   node.isStart = false;\n    else if (this.state.clickAction === \"goal\")   node.isGoal = false;\n    this.setState({ graph });\n    \n  };\n\n  onMouseUp = () => {\n    //mouse up after either start node or goal node is clicked\n    if (this.state.clickAction !== \"\") this.setState({ clickAction: \"\" });\n  };\n\n  animateSearch = () => {\n    const graph = this.state.graph;\n\n    graph.closed.forEach((node, iteration) => {\n      setTimeout(() => {\n        const newNode = {\n          ...node,\n          visited: true\n        };\n        graph.nodes[node.row][node.col] = newNode;\n        this.setState({ graph });\n      }, 100 * iteration);\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar algoChosen={this.state.algoChosen} handleAlgoDropdown={this.handleAlgoDropdown} activateSearch={this.activateSearch}/>\n        <Grid\n          grid={this.state.graph.nodes}\n          onMouseDown={this.onMouseDown}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n          onMouseUp={this.onMouseUp}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/js/dist/dropdown'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}>\n  {console.log(process.env.PUBLIC_URL)}\n  <App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}